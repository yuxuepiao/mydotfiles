-- vim.opt.rtp.prepend(vim.opt.rtp, lazypath)

-- table syntax {}
require("lazy").setup({
    { -- kanagawa color schem
        "rebelot/kanagawa.nvim",
        config = function()    -- call back function after successfully download plugin
            --vim.cmd.colorscheme("kanagawa-wave")
        end,
    },
    { -- catpupuccin
        "catppuccin/nvim",
        name = "catppuccin",
        priority = 1000,
        config = function()    -- call back function after successfully download plugin
            vim.cmd.colorscheme("catppuccin")  -- catppuccin-latte, catppuccin-frappe, catppuccin-macchiato, catppuccin-mocha
        end,
    },
    
    {
        "neovim/nvim-lspconfig",
        config = function()
            local lspconfig = require("lspconfig")
            --lspconfig.clangd.setup({
            --})
        end,
    },
    {
        "lukas-reineke/indent-blankline.nvim", main = "ibl", opts = {},
        config = function()
            require("ibl").setup({})
        end,
    },
    {
        "williamboman/mason-lspconfig.nvim",
        dependencies = {
            "mason.nvim",  -- order
        },
        config = function()
            require("mason-lspconfig").setup()
            require("mason-lspconfig").setup_handlers ({
                function (server_name)
                    require("lspconfig")[server_name].setup ({})
                end,
            })
        end,
    },
    {
        "williamboman/mason.nvim",
        config = function()
            require("mason").setup({
                ui = {
                    icons = {
                        package_installed = "✓",
                        package_pending = "➜",
                        package_uninstalled = "✗"
                    }
                }
            })
        end,
    },
    {
        "stevearc/conform.nvim",
        config = function()
            require("conform").setup({
                formatters_by_ft = {
                    lua = { "stylua" },
                    -- Conform will run multiple formatters sequentially
                    python = { "isort"},
                    -- Use a sub-list to run only the first available formatter
                    bash = {"beautysh"},
                    php = {"phpinsights"},
                },
            })
        end,
    },
    
    {
        "Vigemus/iron.nvim",
        dependencies = {
        },
        config = function()
            require("iron.core").setup({
                config = {
                -- Whether a repl should be discarded or not
                    scratch_repl = true,
    -- Your repl definitions come here
    repl_definition = {
      sh = {
        -- Can be a table or a function that
        -- returns a table (see below)
        command = {"zsh"}
      }
    },
    -- How the repl window will be displayed
    -- See below for more information
    repl_open_cmd = require('iron.view').bottom(40),
  },
  -- Iron doesn't set keymaps by default anymore.
  -- You can set them here or manually add keymaps to the functions in iron.core
  keymaps = {
    send_motion = "<space>sc",
    visual_send = "<space>sc",
    send_file = "<space>sf",
    send_line = "<space>sl",
    send_paragraph = "<space>sp",
    send_until_cursor = "<space>su",
    send_mark = "<space>sm",
    mark_motion = "<space>mc",
    mark_visual = "<space>mc",
    remove_mark = "<space>md",
    cr = "<space>s<cr>",
    interrupt = "<space>s<space>",
    exit = "<space>sq",
    clear = "<space>cl",
  },
  -- If the highlight is on, you can change how it looks
  -- For the available options, check nvim_set_hl
  highlight = {
    italic = true
  },
  ignore_blank_lines = true, -- ignore blank lines when sending visual select lines
            })
            vim.keymap.set('n', '<space>rs', '<cmd>IronRepl<cr>')
            vim.keymap.set('n', '<space>rr', '<cmd>IronRestart<cr>')
            vim.keymap.set('n', '<space>rf', '<cmd>IronFocus<cr>')
            vim.keymap.set('n', '<space>rh', '<cmd>IronHide<cr>')
        end,
    },
    

    {
        'nvim-telescope/telescope.nvim', tag = '0.1.6',
        dependencies = { 'nvim-lua/plenary.nvim' },
        config = function() 
            local builtin = require('telescope.builtin')
            vim.keymap.set('n', '<c-p>', builtin.find_files, {})
            vim.keymap.set('n', '<leader>fg', builtin.live_grep, {})
            vim.keymap.set('n', '<leader>fb', builtin.buffers, {})
            vim.keymap.set('n', '<leader>fh', builtin.help_tags, {})
        end,
    }, 
    {
        "nvim-tree/nvim-tree.lua",
        version = "*",
        lazy = false,
        dependencies = {
            "nvim-tree/nvim-web-devicons",
        },
        config = function()
            require("nvim-tree").setup({
                sort = {
                    sorter = "case_sensitive",
                },
                view = {
                    width = 30,
                },
                renderer = {
                    group_empty = true,
                },
                filters = {
                    dotfiles = true,
                },

                vim.keymap.set('n', '<c-n>', ':NvimTreeFindFile<CR>')
            })
        end,
    },
    {
        "AckslD/nvim-neoclip.lua",
        dependencies = {
            {'kkharji/sqlite.lua', module = 'sqlite'},
        },
        config = function()
            require('neoclip').setup({
            })

        end,
    },
})


